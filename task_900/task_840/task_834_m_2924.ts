/**
В турнире участвуют n команд с номерами от 0 до n – 1; каждая команда также является узлом в группе обеспечения доступности баз данных. Вам даны целое число n и двумерный целочисленный массив ребер с индексом 0 и длиной m, представляющий DAG, где ребра [i] = [ui, vi] указывают, что в графе есть направленное ребро от команды ui до команды vi. Направленное ребро от a до b в графе означает, что команда a сильнее команды b, а команда b слабее команды a. Команда А станет чемпионом турнира, если нет команды Б, которая сильнее команды А. Возвращает команду, которая станет чемпионом турнира, если есть уникальный чемпион, в противном случае возвращает -1. Примечания Цикл — это последовательность узлов a1, a2, ..., an, an+1, такая что узел a1 является тем же узлом, что и узел an+1, узлы a1, a2, ..., an различны, и при этом — направленное ребро от узла ai до узла ai+1 для каждого i в диапазоне [1, n]. DAG — это ориентированный граф, не имеющий цикла
 */
let n = 3;
let edges = [
    [0, 1],
    [1, 2],
];
function findChampion(n: number, edges: number[][]): number {
    const degree = new Array(n).fill(0);
    for (const edge of edges) {
        degree[edge[1]]++;
    }

    let res = [];
    for (let i = 0; i < n; i++) {
        if (degree[i] === 0) {
            res.push(i);
        }
    }

    if (res.length === 1) {
        return res[0];
    } else {
        return -1;
    }
}

console.log(findChampion(n, edges));

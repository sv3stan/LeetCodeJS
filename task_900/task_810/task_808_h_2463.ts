/**
На оси X есть несколько роботов и заводов. Вам дан робот в виде целочисленного массива, где robot[i] — позиция i-го робота. Вам также предоставляется фабрика двумерного целочисленного массива, где фабрика[j] = [positionj, limitj] указывает, что позицияj — это позиция j-й фабрики и что j-я фабрика может ремонтировать не более лимитированных j роботов.
Позиции каждого робота уникальны. Позиции каждого завода также уникальны. Обратите внимание, что изначально робот может находиться в том же положении, что и фабрика.
Все роботы изначально сломаны; они продолжают двигаться в одном направлении. Направление может быть отрицательным или положительным направлением оси X. Когда робот достигает фабрики, которая не достигла своего предела, фабрика ремонтирует робота, и он перестает двигаться.
В любой момент вы можете задать начальное направление движения какого-либо робота. Ваша цель — минимизировать общее расстояние, пройденное всеми роботами.
Возвращает минимальное общее расстояние, пройденное всеми роботами. Тестовые случаи создаются таким образом, чтобы все роботы могли быть отремонтированы.
Обратите внимание, что
Все роботы движутся с одинаковой скоростью.
Если два робота движутся в одном направлении, они никогда не столкнутся.
Если два робота движутся в противоположных направлениях и в какой-то момент встречаются, они не сталкиваются. Они пересекают друг друга.
Если робот проходит мимо фабрики, достигшей своих пределов, он пересекает ее, как будто ее не существует.
Если робот переместился из позиции x в позицию y, расстояние, которое он переместил, равно |y - x|.
 */

let robot = [0, 4, 6];
let factory = [
    [2, 2],
    [6, 2],
];

function minimumTotalDistance(robot: number[], factory: number[][]): number {
    robot.sort((a, b) => a - b); // Сортируем роботов по позициям
    factory.sort((a, b) => a[0] - b[0]); // Сортируем фабрики по позициям

    const n = robot.length;
    const m = factory.length;
    const dp = Array.from({ length: n + 1 }, () => Array(m + 1).fill(Infinity));

    // Базовый случай: если нет роботов, расстояние — 0
    for (let j = 0; j <= m; j++) dp[0][j] = 0;

    for (let i = 1; i <= n; i++) {
        for (let j = 1; j <= m; j++) {
            let dist = 0;
            dp[i][j] = dp[i][j - 1]; // Случай, когда текущий робот не ремонтируется в заводе j

            for (let k = 1; k <= Math.min(i, factory[j - 1][1]); k++) {
                dist += Math.abs(robot[i - k] - factory[j - 1][0]);
                dp[i][j] = Math.min(dp[i][j], dp[i - k][j - 1] + dist);
            }
        }
    }

    return dp[n][m];
}

console.log(minimumTotalDistance(robot, factory));
